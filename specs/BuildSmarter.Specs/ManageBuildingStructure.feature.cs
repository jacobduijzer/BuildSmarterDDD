// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BuildSmarter.Specs
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ManageBuildingStructureFeature : object, Xunit.IClassFixture<ManageBuildingStructureFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private static global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "ManageBuildingStructure.feature"
#line hidden
        
        public ManageBuildingStructureFeature(ManageBuildingStructureFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly();
            global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "", "Manage Building Structure", ("As a building administrator\r\nI want to manage the floors and rooms within a build" +
                    "ing\r\nSo that the building\'s structure is consistent and rooms are correctly orga" +
                    "nized"), global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await testRunner.OnFeatureEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
            testRunner = null;
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Adding a new floor to a building")]
        [Xunit.TraitAttribute("FeatureTitle", "Manage Building Structure")]
        [Xunit.TraitAttribute("Description", "Adding a new floor to a building")]
        public async System.Threading.Tasks.Task AddingANewFloorToABuilding()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Adding a new floor to a building", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
        await testRunner.GivenAsync("a building named \"Empire State Building\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 8
        await testRunner.WhenAsync("I add a floor with number 1 to the building", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 9
        await testRunner.ThenAsync("the building should have 1 floor with number 1", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Adding a duplicate floor to a building")]
        [Xunit.TraitAttribute("FeatureTitle", "Manage Building Structure")]
        [Xunit.TraitAttribute("Description", "Adding a duplicate floor to a building")]
        public async System.Threading.Tasks.Task AddingADuplicateFloorToABuilding()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Adding a duplicate floor to a building", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 11
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 12
        await testRunner.GivenAsync("a building named \"Empire State Building\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 13
        await testRunner.AndAsync("a floor with number 1 exists in the building", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 14
        await testRunner.WhenAsync("I try to add a floor with number 1 to the building", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 15
        await testRunner.ThenAsync("I should see an error message \"Floor number already exists in this building.\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Adding a room to an existing floor")]
        [Xunit.TraitAttribute("FeatureTitle", "Manage Building Structure")]
        [Xunit.TraitAttribute("Description", "Adding a room to an existing floor")]
        public async System.Threading.Tasks.Task AddingARoomToAnExistingFloor()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Adding a room to an existing floor", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 17
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 18
        await testRunner.GivenAsync("a building named \"Empire State Building\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 19
        await testRunner.AndAsync("a floor with number 1 exists in the building", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 20
        await testRunner.WhenAsync("I add a room named \"Conference Room A\" to floor 1", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 21
        await testRunner.ThenAsync("floor 1 should have a room named \"Conference Room A\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Adding a room to a non-existent floor")]
        [Xunit.TraitAttribute("FeatureTitle", "Manage Building Structure")]
        [Xunit.TraitAttribute("Description", "Adding a room to a non-existent floor")]
        public async System.Threading.Tasks.Task AddingARoomToANon_ExistentFloor()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Adding a room to a non-existent floor", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 23
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 24
        await testRunner.GivenAsync("a building named \"Empire State Building\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 25
        await testRunner.WhenAsync("I try to add a room named \"Conference Room A\" to floor 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 26
        await testRunner.ThenAsync("I should see an error message \"Floor does not exist.\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Adding a duplicate room to a floor")]
        [Xunit.TraitAttribute("FeatureTitle", "Manage Building Structure")]
        [Xunit.TraitAttribute("Description", "Adding a duplicate room to a floor")]
        public async System.Threading.Tasks.Task AddingADuplicateRoomToAFloor()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Adding a duplicate room to a floor", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 28
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 29
        await testRunner.GivenAsync("a building named \"Empire State Building\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 30
        await testRunner.AndAsync("a floor with number 1 exists in the building", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 31
        await testRunner.AndAsync("a room named \"Lobby\" exists on floor 1", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 32
        await testRunner.WhenAsync("I try to add a room named \"Lobby\" to floor 1", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 33
        await testRunner.ThenAsync("I should see an error message \"Room already exists on this floor.\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Viewing building details with floors and rooms")]
        [Xunit.TraitAttribute("FeatureTitle", "Manage Building Structure")]
        [Xunit.TraitAttribute("Description", "Viewing building details with floors and rooms")]
        public async System.Threading.Tasks.Task ViewingBuildingDetailsWithFloorsAndRooms()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Viewing building details with floors and rooms", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 35
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 36
        await testRunner.GivenAsync("a building named \"Empire State Building\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 37
        await testRunner.AndAsync("a floor with number 1 exists in the building", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 38
        await testRunner.AndAsync("a room named \"Lobby\" exists on floor 1", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 39
        await testRunner.AndAsync("a room named \"Conference Room A\" exists on floor 1", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 40
        await testRunner.AndAsync("a floor with number 2 exists in the building", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 41
        await testRunner.WhenAsync("I view the details of the building", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                            "Floor Number",
                            "Rooms"});
                table1.AddRow(new string[] {
                            "1",
                            "Lobby, Conference Room A"});
                table1.AddRow(new string[] {
                            "2",
                            ""});
#line 42
        await testRunner.ThenAsync("I should see the following structure:", ((string)(null)), table1, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Adding a new floor raises a domain event")]
        [Xunit.TraitAttribute("FeatureTitle", "Manage Building Structure")]
        [Xunit.TraitAttribute("Description", "Adding a new floor raises a domain event")]
        public async System.Threading.Tasks.Task AddingANewFloorRaisesADomainEvent()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Adding a new floor raises a domain event", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 47
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 48
        await testRunner.GivenAsync("a building named \"Empire State Building\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 49
        await testRunner.WhenAsync("I add a floor with number 1 to the building", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 50
        await testRunner.ThenAsync("a \"FloorAddedEvent\" should be raised with floor number 1", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await ManageBuildingStructureFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await ManageBuildingStructureFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
